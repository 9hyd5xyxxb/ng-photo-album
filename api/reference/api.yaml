openapi: 3.0.4
x-stoplight:
  id: yb3c3heqbgsuf
info:
  title: api
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
  '/albums/{albumId}':
    parameters:
      - schema:
          type: integer
        name: albumId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
      operationId: get-albums-albumId
  /albums:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
              examples:
                example-1:
                  value:
                    - userId: 0
                      id: 0
                      title: string
      operationId: get-albums
  '/photos/{photoId}':
    parameters:
      - schema:
          type: integer
        name: photoId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
      operationId: get-photos-photoId
  /photos:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photo'
      operationId: get-photos
  /posts:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
      operationId: get-posts
  '/posts/{postId}':
    parameters:
      - schema:
          type: integer
        name: postId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      operationId: get-posts-postId
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        username:
          type: string
        email:
          type: string
        address:
          type: object
          properties:
            street:
              type: string
            suite:
              type: string
            city:
              type: string
            zipcode:
              type: string
            geo:
              type: object
              properties:
                lat:
                  type: string
                lng:
                  type: string
        phone:
          type: string
        website:
          type: string
        company:
          type: object
          properties:
            name:
              type: string
            catchPhrase:
              type: string
            bs:
              type: string
      x-examples:
        example-1:
          id: 1
          name: Leanne Graham
          username: Bret
          email: Sincere@april.biz
          address:
            street: Kulas Light
            suite: Apt. 556
            city: Gwenborough
            zipcode: 92998-3874
            geo:
              lat: '-37.3159'
              lng: '81.1496'
          phone: 1-770-736-8031 x56442
          website: hildegard.org
          company:
            name: Romaguera-Crona
            catchPhrase: Multi-layered client-server neural-net
            bs: harness real-time e-markets
    Album:
      type: object
      properties:
        userId:
          type: integer
        id:
          type: integer
        title:
          type: string
      x-examples:
        example-1:
          userId: 1
          id: 1
          title: quidem molestiae enim
    Photo:
      type: object
      properties:
        albumId:
          type: integer
        id:
          type: integer
        title:
          type: string
        url:
          type: string
        thumbnailUrl:
          type: string
      x-examples:
        example-1:
          albumId: 1
          id: 1
          title: accusamus beatae ad facilis cum similique qui sunt
          url: 'https://via.placeholder.com/600/92c952'
          thumbnailUrl: 'https://via.placeholder.com/150/92c952'
    Post:
      type: object
      properties:
        userId:
          type: integer
        id:
          type: integer
        title:
          type: string
        body:
          type: string
      x-examples:
        example-1:
          userId: 1
          id: 1
          title: sunt aut facere repellat provident occaecati excepturi optio reprehenderit
          body: |-
            quia et suscipit
            suscipit recusandae consequuntur expedita et cum
            reprehenderit molestiae ut ut quas totam
            nostrum rerum est autem sunt rem eveniet architecto
